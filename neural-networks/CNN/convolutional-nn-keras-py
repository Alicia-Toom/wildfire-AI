#from keras.models import Sequential
#from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
# from keras.model_selection import train_test_split
import os
import cv2
import numpy as np
import tensorflow as tf
import sys

print(sys.path)


# def load_images_from_folder(folder):
#     images = []pip
#     for filename in os.listdir(folder):
#         img = cv2.imread(os.path.join(folder,filename))
#         if img is not None:
#             images.append(img)
#         return images

# def cnn():
#     fire_images = load_images_from_folder("c:/code/applied-ai/data/root/datasets/50-50/fire")
#     forest_images = load_images_from_folder("c:/code/applied-ai/data/root/datasets/50-50/no-fire")

#     fire_np = np.array(fire_images)
#     forest_np = np.array(forest_images)

#     x_train, x_test = train_test_split(fire_images, test_size=0.2, random_state=42)
#     y_train, y_test = train_test_split(forest_images, test_size=0.2, random_state=42)


#     # Create the model
#     model = Sequential()

#     # Add convolutional layers
#     model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)))
#     model.add(Conv2D(64, (3, 3), activation='relu'))
#     model.add(MaxPooling2D(pool_size=(2, 2)))

#     # Add a flattening layer
#     model.add(Flatten())

#     # Add dense layers
#     model.add(Dense(128, activation='relu'))
#     model.add(Dense(10, activation='softmax'))

#     # Compile the model
#     model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

#     # Train the model
#     model.fit(x_train, y_train, batch_size=32, epochs=10, validation_data=(x_val, y_val))

#     # Evaluate the model
#     model.evaluate(x_test, y_test)

# cnn()